import pytest
from kakuro import CSP

# Happy path tests
@pytest.mark.parametrize("variables, domains, constraints, expected", [
    # Test ID: #1
    ([], {}, {}, {}),
    # Test ID: #2
    (['A1', 'A2'], {'A1': {1, 2}, 'A2': {2, 3}}, {}, {'A1': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'A2': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'A3': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'A4': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'A5': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'A6': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'A7': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'A8': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'A9': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'B1': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'B2': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'B3': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'B4': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'B5': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'B6': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'B7': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'B8': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'B9': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'C1': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'C2': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'C3': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'C4': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'C5': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'C6': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'C7': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'C8': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'C9': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'D1': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'D2': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'D3': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'D4': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'D5': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'D6': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'D7': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'D8': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'D9': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'E1': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'E2': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'E3': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'E4': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'E5': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'E6': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'E7': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'E8': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'E9': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'F1': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'F2': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'F3': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'F4': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'F5': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'F6': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'F7': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'F8': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'F9': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'G1': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'G2': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'G3': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'G4': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'G5': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'G6': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'G7': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'G8': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'G9': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'H1': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'H2': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'H3': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'H4': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'H5': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'H6': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'H7': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'H8': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'H9': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'I1': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'I2': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'I3': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'I4': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'I5': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'I6': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'I7': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'I8': {1, 2, 3, 4, 5, 6, 7, 8, 9}, 'I9': {1, 2, 3, 4, 5, 6, 7, 8, 9}}),
], ids=["empty", "basic"])
def test_CSP_Vars_Doms(variables, domains, constraints, expected, capsys):
    # Arrange
    csp = CSP(variables, domains, constraints)

    # Act
    csp.Vars_Doms()
    captured = capsys.readouterr()

    # Assert
    assert eval(captured.out) == expected

# Edge cases
@pytest.mark.parametrize("variables, domains, constraints", [
    # Test ID: #1
    (None, None, None),
    # Test ID: #2
    ([], {}, {}),
], ids=["none_types", "empty"])
def test_CSP_Vars_Doms_edge_cases(variables, domains, constraints):
    # Arrange
    with pytest.raises(TypeError):
        CSP(variables, domains, constraints)

# Error cases
@pytest.mark.parametrize("variables, domains, constraints", [
    # Test ID: #1
    ("not a list", {}, {}),
    # Test ID: #2
    ([], "not a dict", {}),
    # Test ID: #3
    ([], {}, "not a dict"),
], ids=["variables_not_list", "domains_not_dict", "constraints_not_dict"])
def test_CSP_Vars_Doms_error_cases(variables, domains, constraints):
    # Arrange
    with pytest.raises(ValueError):
        CSP(variables, domains, constraints)
